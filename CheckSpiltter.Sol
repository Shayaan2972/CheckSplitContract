// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./ICheckSplitter.sol";

/// @title Check Splitting Contract
/// @Splits a bill among participants
contract CheckSplitter is ICheckSplitter {
    address public owner = msg.sender;
    address[] public participants;
    mapping(address => bool) public isParticipant;
    mapping(address => uint256) public shares;
    uint256 public totalBill;
    bool public billInitialized;

    /// @notice Restricts access to the contract owner.
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can call this function.");
        _;
    }

    /// @notice Ensures only registered participants can call certain functions.
    modifier onlyParticipant() {
        require(isParticipant[msg.sender], "You are not a registered participant.");
        _;
    }

    // @inheritdoc ICheckSplitter
    function registerParticipant(address participant) external override onlyOwner {
        require(!isParticipant[participant], "Participant already registered.");
        require(participant != address(0), "Invalid participant address.");

        participants.push(participant);
        isParticipant[participant] = true;
    }

    function initializeBill(uint256 amount) external override onlyOwner {
        require(!billInitialized, "Bill already initialized.");
        require(amount > 0, "Bill amount must be greater than 0.");

        totalBill = amount;
        billInitialized = true;
    }

    /// @inheritdoc ICheckSplitter
    function withdraw(uint256 amount) external override onlyParticipant {
        require(amount > 0, "Withdrawal amount must be greater than 0.");
        require(shares[msg.sender] >= amount, "Insufficient balance to withdraw.");

        shares[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);

        emit Withdrawal(msg.sender, amount);
    }

    // Placeholder for `contribute` function 
    // function contribute(uint256 amount) external payable override {
    // 
    // }

    // Placeholder for `transferRemaining` function 
    // function transferRemaining() external override onlyOwner {
    // 
    // }

    // Placeholder for other teammate functionality
    // function getParticipantDetails(address participant) {
    //
    // }

    /// @dev Allows the contract to receive Ether payments.
    receive() external payable {}
}
